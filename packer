#!/usr/bin/env python
# -*- encoding: utf-8 -*-
#
# Copyright 2009, David Anderson <dave@natulte.net>
#
# Create a packfile from a set of files.
#
# See README for details.
#
# Copyright 2009, David Anderson <dave@natulte.net>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#
# Please further note that this license covers only the
# packing/unpacking code. If an archive is appended to the packer file
# by the packing code, the contents of that archive is NOT covered by
# this license. Please consult the contents of the archive to find the
# license for that data.

from __future__ import with_statement

import glob
import hashlib
import os
import os.path
import shutil
import stat
try:
    import cStringIO as StringIO
except ImportError:
    import StringIO
import subprocess
import sys
import tarfile
import tempfile


CR_ESCAPE = '%%CR_ESCAPE%%'
NL_ESCAPE = '%%NL_ESCAPE%%'
CHECKSUM = '%%CHECKSUM%%'
EXECUTABLE = '%%EXECUTABLE%%'
IS_PACKED = '%%IS_PACKED%%'
ARCHIVE_DELIMITER = '# BEGIN ARCHIVE'

# BEGIN_ENCODER
ENCODER_DELIMITER = '# BEGIN_ENCODER'
DECODER_DELIMITER = '# BEGIN_DECODER'

def _cleanpath(path):
    return os.path.normpath(os.path.expanduser(os.path.expandvars(path)))


def _expandpaths(pattern_list):
    clean_list = [_cleanpath(x) for x in pattern_list]
    for path in clean_list:
        for expanded in glob.glob(path):
            yield expanded


def _make_tar_string(file_list):
    tar_out = StringIO.StringIO()

    tar = tarfile.open(fileobj=tar_out, mode='w:gz',
                       format=tarfile.USTAR_FORMAT)
    for path in file_list:
        tar.add(path)
    tar.close()
    return tar_out.getvalue()


def _encode_char(string, badchar):
    def candidate_chars():
        # Newline and carriage return will expose python to raw
        # archive. 92 is \ and will cause stuff to be escaped,
        # possibly strangely.
        STOP_CHARS = [10, 13, 92]
        for x in xrange(0, 127):
            if x in STOP_CHARS: continue
            yield x

    for i in candidate_chars():
        for j in candidate_chars():
            s = chr(i) + chr(j)
            if s not in string:
                encoded = ''.join(['\\x%02x' % ord(x) for x in s])
                return encoded, string.replace(badchar, s)


def _substitute_vars(text, vars):
    for name, value in vars.iteritems():
        text = text.replace('%%' + name + '%%', str(value))
    return text


def _clean_unpacker(source, cr_escape, nl_escape,
                    checksum, executable):
    source = source.splitlines(True)
    out, source = source[:2], source[2:]

    in_encoder = False
    for line in source:
        if line.startswith(ENCODER_DELIMITER):
            in_encoder = True
        elif line.startswith(DECODER_DELIMITER):
            in_encoder = False
        if not in_encoder and not line.startswith('#') and line.strip():
            out.append(line)
    unpacker = ''.join(out)

    return _substitute_vars(unpacker, {
            'CR_ESCAPE': cr_escape,
            'NL_ESCAPE': nl_escape,
            'CHECKSUM': checksum,
            'EXECUTABLE': executable,
            'IS_PACKED': 1}).strip()


def pack():
    output, executable, pattern_list = sys.argv[1], sys.argv[2], sys.argv[2:]

    archive = _make_tar_string(_expandpaths(pattern_list))

    sha1 = hashlib.sha1()
    sha1.update(archive)
    checksum = sha1.hexdigest()

    cr_escape, archive = _encode_char(archive, '\r')
    nl_escape, archive = _encode_char(archive, '\n')

    with open(__file__, 'rb') as f:
        unpacker = _clean_unpacker(f.read(), cr_escape, nl_escape,
                                   checksum, executable)

    with open(output, 'wb') as f:
        f.write(unpacker)
        f.write('\n%s' % ARCHIVE_DELIMITER)
        f.write(archive)
    os.chmod(output, stat.S_IRWXU)


# BEGIN_DECODER
def _get_archive():
    with open(sys.argv[0]) as f:
        for line in f:
            if line.startswith(ARCHIVE_DELIMITER):
                archive = line[len(ARCHIVE_DELIMITER):].strip()
                archive = archive.replace(NL_ESCAPE, '\n')
                return archive.replace(CR_ESCAPE, '\r')


def _unpack_archive(archive, dest):
    tar_in = StringIO.StringIO(archive)
    tar = tarfile.open(fileobj=tar_in, mode='r:gz')
    tar.extractall(path=dest)
    tar.close()


def _prepare_env(vars, dir):
    env = os.environ
    for var in vars:
        if var in env:
            env[var] = '%s:%s' % (dir, env[var])
        else:
            env[var] = dir
    env['UNPACK_DIR'] = dir
    return env


def _execute_main(dir):
    mainfile = os.path.join(dir, EXECUTABLE)
    if not os.path.isfile(mainfile):
        return
    env = _prepare_env(
        ['PATH', 'PYTHONPATH', 'RUBYPATH', 'LD_LIBRARY_PATH'], dir)
    subprocess.call([mainfile] + sys.argv[1:], cwd=os.getcwd(), env=env)


def unpack():
    tempdir = tempfile.mkdtemp(suffix='_' + CHECKSUM, prefix='pack_')
    _unpack_archive(_get_archive(), tempdir)
    _execute_main(tempdir)
    shutil.rmtree(tempdir)


if __name__ == '__main__':
    unpack() if IS_PACKED == '1' else pack()
